var tipuesearch = {"pages": [{'title': 'About', 'text': 'wcm2022 \n 41023120 \n 倉儲: https://github.com/41023120/wcm2022 \n 作業網頁\xa0 https://41023120.github.io/wcm2022/content/index.html \n', 'tags': '', 'url': 'About.html'}, {'title': 'run', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n \n \n', 'tags': '', 'url': 'run.html'}, {'title': 'w13', 'text': 'R為旋轉方塊 \n 左右 方向鍵可以控制方塊移動 \n D為直接將方塊快速往下移動 \n \xa0 \n  導入 brython 程式庫  \n \n \n  啟動 Brython  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'midterm', 'text': '\n', 'tags': '', 'url': 'midterm.html'}, {'title': 'w14', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n \n \n', 'tags': '', 'url': 'w14.html'}, {'title': '1a分組名單', 'text': '1a github 帳號 組別 30925140 30925140 1 40623143 40623143 6 40723141 s40723141 6 40723207 s40723207 3 40723226 s40723226 3 40723229 s40723229 3 40723233 s40723233 3 40723239 s40723239 3 40723245 s40723245 3 40823132 40823132 6 41023104 CHIA-ROU 5 41023105 41023105 5 41023108 KEHUEISIN 1 41023110 41023110 1 41023112 41023112 2 41023118 41023118 4 41023119 41023119 4 41023120 41023120 4 41023121 41023121 2 41023122 lianian1120 4 41023124 41023124 4 41023125 41023125 4 41023130 41023130 4 41023131 george0324 4 41023133 JIAN3-LIN 2 41023134 41023134 2 41023138 jamie_920130 1 41023140 dan41023140 2 41023142 41023142 1 41023143 shih1717 2 41023146 41023146 2 41023147 Xiang0502 2 41023148 6 41023154 zeromarurei 1 \n \n \n \n', 'tags': '', 'url': '1a分組名單.html'}, {'title': 'w17', 'text': '\n 這一次玩的俄羅斯方塊我把fps改成了55讓他速度變慢讓我有更多時間去思考因為正常版fps是設定25我覺得太快,最後是得到73分。 \n \n \n \n 心得:這學期認識到很多新的知識關於網路跟虛擬主機和nginx,對俄羅斯方塊程式更深刻的了解,也知道了下次提交檔案時名稱要好好打,這樣別人看紀錄才會一目了然 \n \n \n \n', 'tags': '', 'url': 'w17.html'}, {'title': '程式內容註解', 'text': '#41023120四設一甲呂昕叡 \n import random #匯入亂數模組 # 以下為 Brython 新增 from browser import document as doc from browser import html import browser.timer #分數系統 def update_score(new_score):  score_doc.innerHTML = "Score: " + str(new_score) # 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應 canvas = html.CANVAS(width = 400, height = 500, id="canvas") brython_div = doc["brython_div"] brython_div <= canvas ctx = canvas.getContext("2d") #方塊顏色表單 colors = [  (0, 0, 0),  (120, 37, 179),  (100, 179, 179),  (80, 34, 22),  (80, 134, 22),  (180, 34, 22),  (180, 34, 122), ] \n #建立方塊形狀 class Figure:  x = 0 #在格子裡的X軸  y = 0 #在格子裡的y軸 #方塊形狀表單  figures = [  [[1, 5, 9, 13], [4, 5, 6, 7]],  [[4, 5, 9, 10], [2, 6, 5, 9]],  [[6, 7, 9, 10], [1, 5, 6, 10]],  [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]],  [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]],  [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]],  [[1, 2, 5, 6]],  ] #建立初始化函數   def __init__(self, x, y):  self.x = x #建立變量  self.y = y #建立變量  self.type = random.randint(0, len(self.figures) - 1) #建立變量  self.color = random.randint(1, len(colors) - 1) #在顏色表單裡隨意取一個數  self.rotation = 0 #要旋轉一個方塊的時候默認值為零 #建立基本功能  def image(self):  return self.figures[self.type][self.rotation] #旋轉功能  def rotate(self):  self.rotation = (self.rotation + 1) % len(self.figures[self.type]) \n #新建另一個類俄羅斯方塊 class Tetris:  level = 2  score = 0 #分數  state = "start" #狀態  field = [] #格子數  height = 0 #高度  width = 0 #寬度  x = 100 #介面外面寬  y = 60 #介面外面長  zoom = 20 #沒一個方塊的格子長寬  figure = None #設方塊初始值 #初始化函數  def __init__(self, height, width):  self.height = height #高度  self.width = width #寬度  self.field = [] #給格子初始化的表單值  self.score = 0 #分數默認值為零  self.state = "start" #賦予狀態  for i in range(height):   new_line = [] #新行  for j in range(width): #每一列都行使相同的操作  # 起始默認時每一個都填入 0  new_line.append(0)  self.field.append(new_line) #放進格子裡面 #新建方塊  def new_figure(self):  self.figure = Figure(3, 0) #一開始就放在橫坐標的3.0的位置 \n def intersects(self):  intersection = False  for i in range(4):  for j in range(4):  if i * 4 + j in self.figure.image():  # block 到達底部, 左右兩邊界, 或該座標有其他 block  if i + self.figure.y > self.height - 1 or \\  j + self.figure.x > self.width - 1 or \\  j + self.figure.x < 0 or \\  self.field[i + self.figure.y][j + self.figure.x] > 0:  intersection = True  return intersection #把滿的那一行消除掉  def break_lines(self):  lines = 0  for i in range(1, self.height):  zeros = 0  for j in range(self.width):  if self.field[i][j] == 0:  zeros += 1  if zeros == 0:  lines += 1  for i1 in range(i, 1, -1):  for j in range(self.width):  self.field[i1][j] = self.field[i1 - 1][j]  self.score += lines ** 2  update_score(self.score) #瞬間往下掉直到碰到其他方塊  def go_space(self):  while not self.intersects():  self.figure.y += 1  self.figure.y -= 1  self.freeze() #往下掉的功能  def go_down(self):  self.figure.y += 1  if self.intersects(): #是否交互  self.figure.y -= 1  self.freeze() #檢查每一列有沒有方塊  def freeze(self):  for i in range(4):   for j in range(4):  if i * 4 + j in self.figure.image():  self.field[i + self.figure.y][j + self.figure.x] = self.figure.color  self.break_lines()   self.new_figure()  if self.intersects(): #如果還是交互了就gameover  self.state = "gameover" #往邊線去走  def go_side(self, dx):  old_x = self.figure.x  self.figure.x += dx  if self.intersects():  self.figure.x = old_x #旋轉系統  def rotate(self):  old_rotation = self.figure.rotation  self.figure.rotate()  if self.intersects():  self.figure.rotation = old_rotation \n # Define some colors # from https://stackoverflow.com/questions/3380726/converting-a-rgb-color-tuple-to-a-six-digit-code BLACK = \'#%02x%02x%02x\' % (0, 0, 0) #常量 WHITE = \'#%02x%02x%02x\' % (255, 255, 255) #常量 GRAY = \'#%02x%02x%02x\' % (128, 128, 128) #常量 \n done = False fps = 25 #幀數 game = Tetris(20, 10) counter = 0 #等級 \n pressing_down = False #設定控制按鍵鍵盤R為旋轉方塊左右鍵為控制方塊移動D為直接將方塊往下到底 \n def key_down(eve):  key = eve.keyCode  #if event.type == pygame.QUIT:  # 32 is pause  if key == 32:  done = True  # 82 is R鍵 to rotate  if key == 82:  game.rotate()  # 40 is down key  if key == 40:  pressing_down = True  # 37 is left key  if key == 37:  game.go_side(-1)  # 39 is right key  if key == 39:  game.go_side(1)  # 68 is d key to move block to bottom  if key == 68:  game.go_space()  # 27 is escape  # reset the game  if key == 27:  game.__init__(20, 10) \n def key_up(eve):  key = eve.keyCode  # 40 is down key  if key == 40:  pressing_down = False \n #如果還沒結束 def do_game():  global counter  if game.figure is None: #如果遊戲值為空新增一些方塊  game.new_figure()  counter += 1   if counter > 100000:  counter = 0  if counter % (fps // game.level // 2) == 0 or pressing_down: #隨著等級越來越高難度也越來越大  if game.state == "start":  game.go_down()  #把格子畫在窗口裡面一行一行的畫  for i in range(game.height):  for j in range(game.width):  ctx.fillStyle = WHITE  #ctx.scale(game.zoom, game.zoom)  ctx.fillRect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)  if game.field[i][j] > 0:  ctx.fillStyle = \'#%02x%02x%02x\' % colors[game.field[i][j]]  ctx.fillRect(game.x + game.zoom * j + 1, game.y + game.zoom * i + 1, game.zoom - 2, game.zoom - 1)  ctx.lineWidth = 1  ctx.strokeStyle = GRAY  ctx.beginPath()  ctx.rect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)  ctx.stroke()  if game.figure is not None: #如果格子裡面不為0的時候把它畫出來  for i in range(4):  for j in range(4):  p = i * 4 + j  if p in game.figure.image():  ctx.fillStyle = \'#%02x%02x%02x\' % colors[game.figure.color]  ctx.fillRect(game.x + game.zoom * (j + game.figure.x) + 1,  game.y + game.zoom * (i + game.figure.y) + 1,  game.zoom - 2, game.zoom - 2) score_doc = html.DIV("score") #字體 score_doc.id = "score" #顯示分數 brython_div <= score_doc \n score = 0 doc.addEventListener("keydown", key_down) doc.addEventListener("keyup", key_up) browser.timer.set_interval(do_game, fps) \n', 'tags': '', 'url': '程式內容註解.html'}, {'title': 'Tetris線上遊戲報告', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n \n', 'tags': '', 'url': 'Tetris線上遊戲報告.html'}, {'title': 'Tetris 加入計分系統', 'text': '\n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n \n', 'tags': '', 'url': 'Tetris 加入計分系統.html'}, {'title': 'Tetris AI', 'text': '\n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n \n \n', 'tags': '', 'url': 'Tetris AI.html'}, {'title': 'Final', 'text': '第1週 創建倉儲 說明如何利用 bat 執行設定 IPv6 網路連線 \n 第2週 解釋python程序是如何執行的 \n 第3週 解釋用 putty wink 視頻添加 ssh 準備創建 Python 3.10.2 和 tcc 可攜帶的環境 加入 1a 上課的兩個教學影片, 分別摘要前兩週的內容, 並說明如何自製可攜系統 \n 第4週 在 gist 加入能讀取網際檔案的範例程式 加入 Brython 程式環境 \n 第5週 全校運動會 \n 第6週 清明節放假 \n 第7週 建立 Wink 教學影片 建立 wcm2022 配置 Brython 環境 設定 Pelican 網誌 Blogger 網誌同步 計算機概論 電腦硬體拆解 建立 Virtualbox 虛擬主機 安裝配置 nginx Windows 10 虛擬主機 \n 第8週 加入各學員倉儲與網頁連結 添加數字線程頁面 加入 w8 虛擬主機 Wink 專案檔 整理課程主題, 並提出下半學期的課程教學要點 \n 第9週 為了方便性, 當期的課程網站, 仍採 Github Pages 伺服靜態網站. 使用的方法很簡單, 只要建立 public Github 倉儲, 然後透過倉儲的 settings, 啟動倉儲的 Github Pages 功能, 並指定從倉儲 main 分支中的 index.html 導引靜態網頁內容即可. \n 第10週 加入電腦輔助設計室個人虛擬主機 IP 設定 \n 第11週 寫 Pelican 網誌 \n 第12週 學校 IPv6 網路不通 \n 第13週 說明如何在個人動態與靜態網頁中配置 Brython 程式環境, 並啟動執行線上程式) 說明下列 Brython 程式各行功能 \n 第14週 將程式存入 Gist, 從舊資料中刪除沒有在註冊名單中的內容 開始做俄羅斯方塊 \n 第15週 端午節放假 俄羅斯方塊及加入計分系統 \n 第16週 期末報告整理 \n', 'tags': '', 'url': 'Final.html'}, {'title': '期末任務1', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n 心得:在做把俄羅斯方塊改為往上時一開始想改參數讓他往上跑,改完參數是往上跑了沒錯但是碰到邊界卻不會停,改了幾次後會停了,但是程式有時候會不知道甚麼原因就不動了,後來有同學做完了我去參考他的發現他用兩行程式就解決讓方塊方向相反,所以我決定引用他的程式。 \n', 'tags': '', 'url': '期末任務1.html'}, {'title': '期末任務2', 'text': '\n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n \n 心得:在做這個程式的時候把期末任務1的程式複製讓AI的程式也改成方塊往上,然後把計分系統刪掉改成原本的計分系統,做完這些讓我對俄羅斯方塊更加了解。 \n \n', 'tags': '', 'url': '期末任務2.html'}]};